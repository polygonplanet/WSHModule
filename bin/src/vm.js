/**
 * Sandbox like VM context.
 */
(function() {

  var Script = createConstructor(function(code, options) {
    this.code = code;
    this.options = mixin({}, options || {});
  }, {
    runInContext: function(context, options) {
      var code = this.code;
      context || (context = {});
      options = mixin(this.options, options || {});

      if (options.filename) {
        code = require('fs').readFileSync(options.filename);
      }

      if (options.timeout) {
        Env.setScriptTimeout(options.timeout);
      }

      try {
        Function('with(this){' + code + '\n}').call(context);
      } catch (e) {
        if (options.displayErrors || options.displayErrors === void 0) {
          WScript.Echo('Error: ' + (e.message || e.description));
        }
      } finally {
        // Shutdown a script if specified with terminate option.
        if (options.terminate) {
          Env.terminate();
        }
      }
    },
    runInThisContext: function(options) {
      this.runInContext(global, options);
    },
    runInNewContext: function(context, options) {
      var code = this.code;
      context || (context = {});
      options = mixin(this.options, options || {});

      if (options.filename) {
        code = require('fs').readFileSync(options.filename);
      }
      var sandbox = new Sandbox();
      sandbox.evalInContext(code, context, options);
    }
  });

  // Sandbox contexts are using a temporary script (wsf) to enable UTF-8.
  var Sandbox = (function() {
    var IDENT = 'WSHModule_AutoGeneratedSandbox';
    var DEFAULT_EXT = 'wsf';
    var TEMPLATES = {
      WSF: [
        '<?xml version="1.0" encoding="utf-8" standalone="yes"?>',
        '<package>',
          '<job id="[[IDENT]]">',
            '<?job error="true" debug="false"?>',
            '<runtime/>',
            '<script language="JScript" type="text/javascript" charset="utf-8">',
            ['<!'] + '[CDATA[',
            '(function(global){',
              '[[CODE]]',
            '}((function(){return this;}())||this||{}));',
            ']]' + ['>'],
            '<' + ['/script>'],
          '</job>',
        '</package>'
      ].join('\n')
    };

    var generateId = function() {
      return [
        IDENT,
        formatDate('YYYYMMDDHHmmss'),
        Math.random().toString(36).slice(2)
      ].join('_');
    };

    var normalizeSource = function(source) {
      return [
        [/[\u001A\u2028\u2029]+/g, ''],
        [/^[\x09\x20]*#.*$/gm, ''],
        [/\r\n|\r|\n/g, '\u000A']
      ].reduce(function(source, re) {
        return source.replace(re[0], re[1]);
      }, source.trim());
    };

    var toCharCode = function(string) {
      return string.split('').map(function(c) {
        return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
      }).join('');
    };

    var escapeCode = function(code) {
      return format('["%s"].join("\\n")', [
        [/[<>*]+/g, toCharCode],
        [/(.{80,260}[^\\])\\n/g, '$1",\u000A"']
      ].reduce(function(code, re) {
        return code.replace(re[0], re[1]);
      }, escapeString(code)));
    };

    var toSourceCode = function(fn) {
      return Function.prototype.toString.call(fn).replace(/^[\s()]+|[\s();]+$/g, '');
    };


    return createConstructor(function(filename) {
      this.filename = URI.normalize(filename || this._getTempFile());
      this.ext = URI.extname(this.filename).toLowerCase();
    }, {
      _getTempFile: function(ext) {
        return CURRENT_DIR + DIR_SEPARATOR +
               '__' + generateId() + '.' + (ext || DEFAULT_EXT).toLowerCase();
      },
      _getFileSource: function(code) {
        return [['IDENT', generateId()], ['CODE', code]].reduce(function(source, item) {
          return source.split('[[' + item[0] + ']]').join(item[1]);
        }, TEMPLATES[this.ext.toUpperCase()]);
      },
      _buildSource: function(code) {
        var resolve64Code = toSourceCode(WSHModule._resolve_64bit_ScriptControl);
        var builtinDefCode = toSourceCode(WSHModule._builtinDefinition);
        var filename = JSON.stringify(WSHModule._filename);

        code = escapeCode(code);
        return format([
          'global.WSHModule={_fixed64bitSymbol:"{fixed64bit}",_inSandbox:true,_filename:%s};',
          '(%s)();',
          '(%s)();',
          'WSHModule.runScript(%s);'
        ].join('\n'), filename, resolve64Code, builtinDefCode, code);
      },
      evalInContext: function(code) {
        var filename = this.filename;

        code = this._getFileSource(this._buildSource(normalizeSource(code)));
        require('fs').writeFileSync(filename, code);
        code = null;

        execCommand(format('wscript.exe //nologo //T:%d %s',
          Env.MAX_SCRIPT_TIMEOUT|0, escapeShellArg(filename)),
          4, true
        );
        return true;
      }
    });
  }());


  exports.vm = {
    Script: Script,
    createScript: function(code, options) {
      return new Script(code, options);
    },
    createContext: function(sandbox) {
      return new Context(sandbox);
    },
    runInContext: function(code, context, options) {
      var script = new Script(code, options);
      return script.runInContext(context, options);
    },
    runInNewContext: function(code, sandbox, options) {
      var script = new Script(code, options);
      return script.runInNewContext(sandbox, options);
    },
    runInThisContext: function(code, options) {
      var script = new Script(code, options);
      return script.runInThisContext(options);
    },
    isContext: function(context) {
      return context instanceof Context;
    }
  };

}());

